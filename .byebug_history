continue
exit
Digest::SHA256.digest to_s
exit
b.include?(Point.new(2,3))
a.any? { |o| b.include?(o) }
a.intersect? b
a & b
b = Set.new([Point.new(2,2), Point.new(2,3)])
a = Set.new([Point.new(1,2), Point.new(2,3)])
z = Set.new([Point.new(1,2), Point.new(2,3)])
z = Set.new([Point.new(1,2)])
z = Set.new([Point.new(1,2),Point.new(2.2)])
z = Set.new([1,2])
z = Set.new([Point.new(1,2),Point.new(2.2)])
b & a
b = Set.new(['x','b','s'])
a = Set.new(['a','b','c'])
a = Set.new('a','b','c')
@points & point.neighbors
point.neighbors
@points
@points & point.neighbors
@points & point.neighbors*
@points & point.*neighbors
*@points & point.*neighbors
@points & point.neighbors
@points
point.neighbors
continue
exit
@result.to_a[1].eql? point
@result.to_a[5].eql? point
point = Point.new(1,3)
pointt = new Point(1,3)
pointt.class
pointt.x
point.x
@result.to_a[5].eql? pointt
@result.to_a[5].eql? point
@result.to_a[5]
@result.to_a[5].eq? pointt
pointt = new Point(1,3)
@result.to_a[5].eq? (new Point.new(1,3))
@result.to_a[5].eq? new Point.new(1,3)
@result.to_a[5].eq? new Point(1,3)
@result.to_a[5].class
@result.to_a[5]
@result.to_a [5]
@result
@result[1]
five
five = @result.take(5)
@result[1]
@result
@result[3]
set[3]
self
@result.delete(self)
@result
@result.count
@result
result
@result.delete(self)
@result
exit
exirt
@result.delete(self)
@result
exit
restart
@result.delete Point.new(0,1)
@result.delete Point(0,1)
@result.delete self
@result.delete(self)
@result.delete self
@result
self
@result.delete self
@result
exit
exirt
next
exit
restart
@points
point.neighbors & @points
point.neighbors
point.neighbors & @points
exit
point.neighbors & @points
point.neighbors
@points
point
exit
restart
continue
exit
help
restart
@result.count
@result
@result.delete Point.new(0,1)
@result - Point.new(0,1)
@result
self.y
self.x
self.@x
self.x
exit
restart
self
@result.count
continue
@result.count
@result
exit
@result - self
result - self
@result
puts @result
puts @resuls
@result.to_s
@result.inspect
p @result
@result
@result.
@result.methods
@result.methods.pretty
@result.methods
@result
